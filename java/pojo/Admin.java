package pojo;
// Generated Oct 5, 2023 4:41:40 PM by Hibernate Tools 4.3.1

import dao.DAOAdmin;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import javax.faces.application.FacesMessage;
import javax.faces.application.NavigationHandler;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.servlet.http.HttpSession;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
/**
 * Admin generated by hbm2java
 */
@ManagedBean(name="login_bean")
public class Admin  implements java.io.Serializable {

    public static int size() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public static Object get(int i) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Id
     private Integer adminId;
     private String adminName;
     private String username;
     private String password;

public Admin(){
    
}

    public Admin(String adminName, String username, String password) {
       this.adminName = adminName;
       this.username = username;
       this.password = password;
    }
   
    public Integer getAdminId() {
        return this.adminId;
    }
    
    public void setAdminId(Integer adminId) {
        this.adminId = adminId;
    }
    public String getAdminName() {
        return this.adminName;
    }
    
    public void setAdminName(String adminName) {
        this.adminName = adminName;
    }
    public String getUsername() {
        return this.username;
    }
    
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }
    public void save() {
        DAOAdmin adao = new DAOAdmin();
        adao.addAdmin(this);
    }

    public void delete(Integer adminId) {
        DAOAdmin adao = new DAOAdmin();
        adao.deleteAdmin(adminId);
    }

    public List<Admin> getbyid() {
        DAOAdmin adao = new DAOAdmin();
        List<Admin> adm = adao.getbyID(adminId);
        adminName = adm.get(0).adminName;
        username = adm.get(0).username;
        password = adm.get(0).password;
        return adm;
    }

    public List<Admin> getAllRecords() {
        DAOAdmin adao = new DAOAdmin();
        List<Admin> bio = adao.showAdmin();
        return bio;
    }

    public void update() {
        DAOAdmin adao = new DAOAdmin();
        adao.updateAdmin(this);
    }
        public boolean checkuser() {
        try {
            SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
            Session session = sessionFactory.openSession();
            FacesContext context = FacesContext.getCurrentInstance();
            Query query = session.createQuery("from Admin where username=:username and password=:password");
            query.setString("username", username);
            query.setString("password", password);

            List list = query.list();

            if (list.size() == 1) {
                context.getExternalContext().getSessionMap().put("user", username);
                return true;
            } else {
                return false;
            }

        } catch (Exception e) {
            e.printStackTrace();
            FacesContext.getCurrentInstance().addMessage("Login failed.", null);
        }
        return false;
    }
         public void logout() throws IOException {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        FacesContext context = FacesContext.getCurrentInstance();
        context.getExternalContext().getSessionMap().remove("user");
        HttpSession session = (HttpSession) facesContext.getExternalContext().getSession(false);

        if (session != null) {
            try {
                session.invalidate();
                facesContext.addMessage(null, new FacesMessage("You have been successfully logged out."));
            } catch (Exception e) {
                facesContext.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "An error occurred while logging out.", null));
            }
        }
        facesContext.getExternalContext().redirect("Login.xhtml");
    }
     public void validate(PhaseEvent event){
        FacesContext context = FacesContext.getCurrentInstance();
        if (context.getExternalContext().getSessionMap().containsKey("user") != true){
            NavigationHandler navigationHandler = context.getApplication().getNavigationHandler();
            navigationHandler.handleNavigation(context, null, "/accessdenied.xhtml?faces-redirect=true");
        }
    }
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
        return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
        return false;
    }
        Admin other = (Admin) obj;
        return Objects.equals(adminId, other.adminId);
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 61 * hash + Objects.hashCode(this.username);
        hash = 61 * hash + Objects.hashCode(this.password);
        return hash;
    }
}

